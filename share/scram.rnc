# ###############################################################

# I. Report/Calculation Layer

# ###############################################################

# =============================================================

# I.1. Models

# =============================================================
start =
  element opsa-mef {
    attribute name { xsd:string }?,
    label?,
    attributes?,
    (event-tree-definition
     | alignment-definition
     | consequence-group-definition
     | consequence-definition
     | rule-definition
     | initiating-event-group-definition
     | initiating-event-definition
     | fault-tree-definition
     | substitution-definition
     | CCF-group-definition
     | include-directive)*,
    element model-data {
      (house-event-definition
       | basic-event-definition
       | parameter-definition
       | include-directive)*
    }?
  }
label = element label { text }
attributes =
  element attributes {
    element attribute {
      attribute name { xsd:string },
      attribute value { xsd:string },
      attribute type { xsd:string }?
    }*
  }
include-directive =
  element include {
    attribute file { xsd:string }
  }
# =============================================================

# I.2. Consequences, Consequence Groups

# =============================================================
consequence-definition =
  element define-consequence {
    attribute name { xsd:string },
    label?,
    attributes?,
    element initiating-event {
      attribute name { xsd:string }
    },
    element sequence {
      attribute name { xsd:string }
    }
  }
consequence-group-definition =
  element define-consequence-group {
    attribute name { xsd:string },
    label?,
    attributes?,
    (consequence | consequence-group)
  }
consequence =
  element consequence {
    attribute name { xsd:string }
  }
consequence-group =
  element consequence-group {
    attribute name { xsd:string }
  }
# =============================================================

# I.3. Missions, Phases

# =============================================================
alignment-definition =
  element define-alignment {
    attribute name { xsd:string },
    label?,
    attributes?,
    phase-definition+
  }
phase-definition =
  element define-phase {
    attribute name { xsd:string },
    attribute time-fraction { xsd:float },
    label?,
    attributes?,
    instruction*
  }
# ###############################################################

# II. Event Tree Layer

# ###############################################################

# =============================================================

# II.1. Initiating events, Initiating event Groups

# =============================================================
initiating-event-definition =
  element define-initiating-event {
    attribute name { xsd:string },
    attribute event-tree { xsd:string }?,
    label?,
    attributes?,
    (collected-item | consequence | consequence-group)?
  }
initiating-event-group-definition =
  element define-initiating-event-group {
    attribute name { xsd:string },
    attribute event-tree { xsd:string }?,
    label?,
    attributes?,
    initiating-event+
  }
initiating-event =
  element initiating-event {
    attribute name { xsd:string }
  }
  | element initiating-event-group {
      attribute name { xsd:string }
    }
collected-item = basic-event | gate | parameter
# =============================================================

# II.2. Event Trees

# =============================================================
event-tree-definition =
  element define-event-tree {
    attribute name { xsd:string },
    label?,
    attributes?,
    functional-event-definition*,
    sequence-definition*,
    branch-definition*,
    initial-state
  }
functional-event-definition =
  element define-functional-event {
    attribute name { xsd:string },
    label?,
    attributes?
  }
sequence-definition =
  element define-sequence {
    attribute name { xsd:string },
    label?,
    attributes?,
    instruction+
  }
branch-definition =
  element define-branch {
    attribute name { xsd:string },
    label?,
    attributes?,
    branch
  }
initial-state = element initial-state { branch }
branch = instruction*, (fork | end-state)
fork =
  element fork {
    attribute functional-event { xsd:string },
    path+
  }
path =
  element path {
    attribute state { xsd:string },
    branch
  }
end-state =
  element sequence {
    attribute name { xsd:string },
    empty
  }
  | element branch {
      attribute name { xsd:string },
      empty
    }
# =============================================================

# II.3. Instructions, Rules

# =============================================================
instruction = set | collect | if-then-else | block | rule | link
set = set-gate | set-house-event | set-basic-event | set-parameter
set-gate =
  element set-gate {
    attribute name { xsd:string },
    attribute direction { direction }?,
    formula
  }
set-house-event =
  element set-house-event {
    attribute name { xsd:string },
    attribute direction { direction }?,
    Boolean-constant
  }
set-basic-event =
  element set-basic-event {
    attribute name { xsd:string },
    attribute direction { direction }?,
    expression
  }
set-parameter =
  element set-parameter {
    attribute name { xsd:string },
    attribute direction { direction }?,
    expression
  }
direction = "forward" | "backward" | "both"
if-then-else = element if { expression, instruction, instruction? }
collect = collect-formula | collect-expression
collect-formula = element collect-formula { formula }
collect-expression = element collect-expression { expression }
block = element block { instruction* }
rule =
  element rule {
    attribute name { xsd:string },
    empty
  }
link =
  element event-tree {
    attribute name { xsd:string },
    empty
  }
rule-definition =
  element define-rule {
    attribute name { xsd:string },
    label?,
    attributes?,
    instruction+
  }
# ###############################################################

# III. Meta-Logical Layer

# ###############################################################

# =============================================================

# III.1. CCF-Groups

# =============================================================
CCF-group-definition =
  element define-CCF-group {
    attribute name { xsd:string },
    attribute model { CCF-model },
    label?,
    attributes?,
    members,
    distribution,
    factors
  }
members = element members { basic-event+ }
factors =
  element factors { factor+ }
  | factor
factor =
  element factor {
    attribute level { xsd:nonNegativeInteger }?,
    expression
  }
distribution = element distribution { expression }
CCF-model = "beta-factor" | "MGL" | "alpha-factor" | "phi-factor"
# =============================================================

# III.2. Substitutions

# =============================================================
substitution-definition =
  element define-substitution {
    attribute name { xsd:string }?,
    attribute type { xsd:string }?,
    label?,
    attributes?,
    element hypothesis { formula },
    element source { basic-event+ }?,
    element target { basic-event+ | Boolean-constant }
  }
# ###############################################################

# IV. Fault Tree Layer

# ###############################################################

# =============================================================

# IV.1. Definitions of Fault Trees & Components

# =============================================================
fault-tree-definition =
  element define-fault-tree {
    attribute name { xsd:string },
    label?,
    attributes?,
    (substitution-definition
     | CCF-group-definition
     | event-definition
     | component-definition
     | parameter-definition
     | include-directive)*
  }
component-definition =
  element define-component {
    attribute name { xsd:string },
    attribute role { "private" | "public" }?,
    label?,
    attributes?,
    (substitution-definition
     | CCF-group-definition
     | event-definition
     | component-definition
     | parameter-definition
     | include-directive)*
  }
event-definition =
  gate-definition | house-event-definition | basic-event-definition
# =============================================================

# IV.2. Definitions of Gates, House Events & Basic Events

# =============================================================
gate-definition =
  element define-gate {
    attribute name { xsd:string },
    attribute role { "private" | "public" }?,
    label?,
    attributes?,
    formula
  }
house-event-definition =
  element define-house-event {
    attribute name { xsd:string },
    attribute role { "private" | "public" }?,
    label?,
    attributes?,
    Boolean-constant?
  }
basic-event-definition =
  element define-basic-event {
    attribute name { xsd:string },
    attribute role { "private" | "public" }?,
    label?,
    attributes?,
    expression?
  }
# =============================================================

# IV.3. Formulae

# =============================================================
formula =
  event
  | Boolean-constant
  | element and { formula+ }
  | element or { formula+ }
  | element not { formula }
  | element xor { formula+ }
  | element iff { formula+ }
  | element nand { formula+ }
  | element nor { formula+ }
  | element atleast {
      attribute min { xsd:nonNegativeInteger },
      formula+
    }
  | element cardinality {
      attribute min { xsd:nonNegativeInteger },
      attribute max { xsd:nonNegativeInteger },
      formula+
    }
  | element imply { formula, formula }
event =
  element event {
    attribute name { xsd:string },
    attribute type { event-type }?
  }
  | gate
  | house-event
  | basic-event
event-type = "gate" | "basic-event" | "house-event"
gate =
  element gate {
    attribute name { xsd:string }
  }
house-event =
  element house-event {
    attribute name { xsd:string }
  }
basic-event =
  element basic-event {
    attribute name { xsd:string }
  }
Boolean-constant =
  element constant {
    attribute value { Boolean-value }
  }
Boolean-value = "true" | "false"
# ###############################################################

# V. Stochastic Layer

# ###############################################################

# =============================================================

# V.1. Definition of Parameters

# =============================================================
parameter-definition =
  element define-parameter {
    attribute name { xsd:string },
    attribute role { "private" | "public" }?,
    attribute unit { units }?,
    label?,
    attributes?,
    expression
  }
units =
  "bool"
  | "int"
  | "float"
  | "hours"
  | "hours-1"
  | "years"
  | "years-1"
  | "fit"
  | "demands"
# =============================================================

# V.2. Expressions

# =============================================================

# ***********************************************************

# V.2.1. Entities

# ***********************************************************
expression =
  constant
  | parameter
  | operation
  | built-in
  | random-deviate
  | test-event
constant = bool | int | float
parameter =
  element parameter {
    attribute name { xsd:string },
    attribute unit { units }?
  }
  | element system-mission-time {
      attribute unit { units }?
    }
operation =
  numerical-operation | Boolean-operation | conditional-operation
built-in = exponential | GLM | Weibull | periodic-test | extern-function
random-deviate =
  uniform-deviate
  | normal-deviate
  | lognormal-deviate
  | gamma-deviate
  | beta-deviate
  | histogram
test-event = test-initiating-event | test-functional-event
# ***********************************************************

# V.2.2. Constants, Parameters

# ***********************************************************
bool =
  element bool {
    attribute value { Boolean-value }
  }
int =
  element int {
    attribute value { xsd:integer }
  }
float =
  element float {
    attribute value { xsd:float }
  }
# ***********************************************************

# V.2.3. Numerical Expressions

# ***********************************************************
numerical-operation =
  element neg { expression }
  | element add { expression+ }
  | element sub { expression+ }
  | element mul { expression+ }
  | element div { expression+ }
  | element pi { empty }
  | element abs { expression }
  | element acos { expression }
  | element asin { expression }
  | element atan { expression }
  | element cos { expression }
  | element cosh { expression }
  | element exp { expression }
  | element log { expression }
  | element log10 { expression }
  | element mod { expression, expression }
  | element pow { expression, expression }
  | element sin { expression }
  | element sinh { expression }
  | element tan { expression }
  | element tanh { expression }
  | element sqrt { expression }
  | element ceil { expression }
  | element floor { expression }
  | element min { expression+ }
  | element max { expression+ }
  | element mean { expression+ }
# ***********************************************************

# V.2.4. Boolean Expressions

# ***********************************************************
Boolean-operation =
  element not { expression }
  | element and { expression+ }
  | element or { expression+ }
  | element eq { expression, expression }
  | element df { expression, expression }
  | element lt { expression, expression }
  | element gt { expression, expression }
  | element leq { expression, expression }
  | element geq { expression, expression }
# ***********************************************************

# V.2.5. Conditional Expressions

# ***********************************************************
conditional-operation = if-then-else-operation | switch-operation
if-then-else-operation =
  element ite { expression, expression, expression }
switch-operation = element switch { case-operation*, expression }
case-operation = element case { expression, expression }
# ***********************************************************

# V.2.6. Built-ins

# ***********************************************************
exponential = element exponential { expression, expression }
GLM = element GLM { expression, expression, expression, expression }
Weibull = element Weibull { expression, expression, expression }
periodic-test =
  element periodic-test {
    expression, expression, expression, expression
  }
  | element periodic-test {
      expression, expression, expression, expression, expression
    }
  | element periodic-test {
      expression,
      expression,
      expression,
      expression,
      expression,
      expression,
      expression,
      expression,
      expression,
      expression,
      expression
    }
extern-function =
  element extern-function {
    attribute name { xsd:string },
    expression*
  }
# ***********************************************************

# V.2.7. Random-Deviates

# ***********************************************************
uniform-deviate = element uniform-deviate { expression, expression }
normal-deviate = element normal-deviate { expression, expression }
lognormal-deviate =
  element lognormal-deviate { expression, expression, expression }
gamma-deviate = element gamma-deviate { expression, expression }
beta-deviate = element beta-deviate { expression, expression }
histogram = element histogram { bin+ }
bin = element bin { expression, expression }
# ***********************************************************

# V.2.8. Test-Events

# ***********************************************************
test-initiating-event =
  element test-initiating-event {
    attribute name { xsd:string }
  }
test-functional-event =
  element test-functional-event {
    attribute name { xsd:string },
    attribute state { xsd:string }
  }
